* Emacs Configuration

* Sensible defaults usage

Use sensible-defaults.el for some basic settings

* Package Management

Use =cask= and =pallet= for package management

#+BEGIN_SRC emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
(require 'pallet)
(setq pallet-mode t)
#+END_SRC

* Some basics
** Disable the audio bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Highlight the current line

It helps to highlight the current line to understand what is happening

#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC

** Getting rid of the welcome scratch buffer

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Disabling tabs because we only believe in spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
#+END_SRC

** Setting the tab-with to 2

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

** Setting the tab behaviour to complete

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** Enabling the mighty ido mode for fuzzy search everywhere

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

** Hide certain modes from the modeline. a.k.a using the diminish

#+BEGIN_SRC emacs-lisp
(defmacro diminish-minor-mode (filename mode &optional abbrev)
  `(eval-after-load (symbol-name ,filename)
     '(diminish ,mode ,abbrev)))

(defmacro diminish-major-mode (mode-hook abbrev)
  `(add-hook ,mode-hook
             (lambda () (setq mode-name ,abbrev))))

(diminish-minor-mode 'abbrev 'abbrev-mode)
(diminish-minor-mode 'simple 'auto-fill-function)
(diminish-minor-mode 'company 'company-mode)
(diminish-minor-mode 'flycheck 'flycheck-mode)
(diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
(diminish-minor-mode 'projectile 'projectile-mode)
(diminish-minor-mode 'subword 'subword-mode)
(diminish-minor-mode 'undo-tree 'undo-tree-mode)
(diminish-minor-mode 'wrap-region 'wrap-region-mode)

(diminish-minor-mode 'paredit 'paredit-mode " Ï€")

(diminish-major-mode 'emacs-lisp-mode-hook "el")


#+END_SRC

** Housekeeping regarding the backup files created by emacs

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC

** Ivy key bindings and setting the fancy mode

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-display-style 'fancy)
#+END_SRC

** Always removing the trailing whitespaces when saving the file

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Since we want to restrict the line length to 80 characters, make the characters after column 80 change color

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))
 (global-whitespace-mode t)
#+END_SRC

** Kill the buffer without prompting
#+BEGIN_SRC emacs-lisp
 (defun kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

** Enable the auto complete mode
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(setq ac-modes '(clojure-mode emacs-lisp))
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (require 'diff-hl)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

** Projectile

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

#+BEGIN_SRC emacs-lisp
  (defun search-project-for-symbol-at-point ()
    "Use `projectile-ag' to search the current project for `symbol-at-point'."
    (interactive)
    (projectile-ag (projectile-symbol-at-point)))

  (global-set-key (kbd "C-c v") 'projectile-ag)
  (global-set-key (kbd "C-c C-v") 'search-project-for-symbol-at-point)
#+END_SRC

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'projectile-dired)
#+END_SRC

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projecile-defined project. This uses the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp
  (setq projectile-require-project-root nil)
#+END_SRC

** Modeline configuration
This is the configuration for the modeline
#+BEGIN_SRC emacs-lisp
    (setq-default
   mode-line-format
   '(; Position, including warning for 80 columns
     "%4l:"
     (:eval (propertize "%3c" 'face
                        (if (>= (current-column) 80)
                            'mode-line-80col-face
                          )))
     ; emacsclient [default -- keep?]
     mode-line-client
     "  "
     ; read-only or modified status
     (:eval
      (cond (buffer-read-only
             (propertize " RO " 'face 'mode-line-read-only-face))
            ((buffer-modified-p)
             (propertize " ** " 'face 'mode-line-modified-face))
            (t "      ")))
     "    "
     ; directory and buffer/file name
     (:propertize "%b"
                  face mode-line-filename-face)
     ; narrow [default -- keep?]
     " %n "
     (vc-mode vc-mode)
     ; mode indicators: vc, recursive edit, major mode, minor modes, process, global
     "  %["
     (:propertize mode-name
                  face mode-line-mode-face)
     "%] "
     (:eval (propertize (format-mode-line minor-mode-alist)
                        'face 'mode-line-minor-mode-face))
     (:propertize mode-line-process
                  face mode-line-process-face)
     (global-mode-string global-mode-string)
     "    "
     ; nyan-mode uses nyan cat as an alternative to %p
     (:eval (when nyan-mode (list (nyan-create))))
     ))

  ;; Helper function
  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
          (output ""))
      (when (and path (equal "" (car path)))
        (setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
        (setq output (concat (car path) "/" output))
        (setq path (cdr path)))
      (when path
        (setq output (concat ".../" output)))
      output))

  ;; Extra mode line faces
  (make-face 'mode-line-read-only-face)
  (make-face 'mode-line-modified-face)
  (make-face 'mode-line-folder-face)
  (make-face 'mode-line-filename-face)
  (make-face 'mode-line-position-face)
  (make-face 'mode-line-mode-face)
  (make-face 'mode-line-minor-mode-face)
  (make-face 'mode-line-process-face)
  (make-face 'mode-line-80col-face)

  (set-face-attribute 'mode-line nil
      :foreground "gray60" :background "gray20"
      :inverse-video nil
      :box '(:line-width 6 :color "gray20" :style nil))
  (set-face-attribute 'mode-line-inactive nil
      :foreground "gray80" :background "gray40"
      :inverse-video nil
      :box '(:line-width 6 :color "gray40" :style nil))

  (set-face-attribute 'mode-line-read-only-face nil
      :inherit 'mode-line-face
      :foreground "#4271ae"
      :box '(:line-width 2 :color "#4271ae"))
  (set-face-attribute 'mode-line-modified-face nil
      :inherit 'mode-line-face
      :foreground "#c82829"
      :background "#ffffff"
      :box '(:line-width 2 :color "#c82829"))
  (set-face-attribute 'mode-line-folder-face nil
      :inherit 'mode-line-face
      :foreground "gray60")
  (set-face-attribute 'mode-line-filename-face nil
      :inherit 'mode-line-face
      :foreground "#eab700"
      :weight 'bold)
  (set-face-attribute 'mode-line-position-face nil
      :inherit 'mode-line-face
      :family "Inconsolata" :height 100)
  (set-face-attribute 'mode-line-mode-face nil
      :inherit 'mode-line-face
      :foreground "gray80")
  (set-face-attribute 'mode-line-minor-mode-face nil
      :inherit 'mode-line-mode-face
      :foreground "gray40"
      :height 110)
  (set-face-attribute 'mode-line-process-face nil
      :inherit 'mode-line-face
      :foreground "#718c00")
  (set-face-attribute 'mode-line-80col-face nil
      :inherit 'mode-line-face
      :foreground "black" :background "#eab700")
#+END_SRC
* UI Preferences

** Dont use the toolbar or menubar so turning it off
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
(scroll-bar-mode -1))
#+END_SRC

** Use fancy lambdas

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

** Customise the solarize-theme

#+BEGIN_SRC emacs-lisp
(defun apply-custom-theme()
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)
(setq solarized-scale-org-headlines nil)
(setq solarized-high-contrast-mode-line t)
(load-theme 'solarized-dark t))
#+END_SRC

** Apply the solarized-dark theme

#+BEGIN_SRC emacs-lisp
(apply-custom-theme)
#+END_SRC

** Customise the fonts and font size

This magic code will help setting the font size and the new "Inconsolata" font for all the frames that are opened up.
It also maps the key bindings to increase and decrease the font size.

#+BEGIN_SRC emacs-lisp
(setq default-font "Inconsolata")
(setq default-font-size 16)
(setq current-font-size default-font-size)

(setq font-change-increment 1.1)

(defun font-code ()
  "Return a string representing the current font (like \"Inconsolata-14\")."
  (concat default-font "-" (number-to-string current-font-size)))

(defun set-font-size ()
  "Set the font to `default-font' at `current-font-size'.
Set that for the current frame, and also make it the default for
other, future frames."
  (let ((font-code (font-code)))
    (add-to-list 'default-frame-alist (cons 'font font-code))
    (set-frame-font font-code)))

(defun reset-font-size ()
  "Change font size back to `default-font-size'."
  (interactive)
  (setq current-font-size default-font-size)
  (set-font-size))

(defun increase-font-size ()
  "Increase current font size by a factor of `font-change-increment'."
  (interactive)
  (setq current-font-size
        (ceiling (* current-font-size font-change-increment)))
  (set-font-size))

(defun decrease-font-size ()
  "Decrease current font size by a factor of `font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq current-font-size
        (max 1
             (floor (/ current-font-size font-change-increment))))
  (set-font-size))

(define-key global-map (kbd "C-)") 'reset-font-size)
(define-key global-map (kbd "C-+") 'increase-font-size)
(define-key global-map (kbd "C-=") 'increase-font-size)
(define-key global-map (kbd "C-_") 'decrease-font-size)
(define-key global-map (kbd "C--") 'decrease-font-size)

(reset-font-size)

#+END_SRC

* evil-mode

** Configuration of =evil-mode=

#+BEGIN_SRC emacs-lisp
(evil-mode 1)
#+END_SRC

** Enable the global evil surround mode everywhere

#+BEGIN_SRC emacs-lisp
(global-evil-surround-mode 1)
#+END_SRC

** Enable the C-p key binding for project navigation

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

** Enable the global leader and set the key

#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode 1)
#+END_SRC

** Smart Parens configuration

Smartparens help to match the parens and complete them in smart way. This setting is to
ensure that smart parens are enabled in evil mode as well

#+BEGIN_SRC emacs-lisp
(smartparens-global-mode 1)
(evil-smartparens-mode 1)
(show-smartparens-global-mode 1)
#+END_SRC

** Evil leader configuration

#+BEGIN_SRC emacs-lisp
(evil-leader/set-leader ",")
(evil-leader/set-key
"b" 'switch-to-buffer
"r" 'split-window-right
"n" 'other-window
"d" 'split-window-below
"u" 'undo-tree-visualize)
#+END_SRC

** Magit with evil
Use =evil= keybindings with =magit=:

#+BEGIN_SRC emacs-lisp
  (require 'evil-magit)
#+END_SRC
* Clojure configurations

#+BEGIN_SRC emacs-lisp
(require 'smartparens)
(require 'evil-smartparens)
(setq sp-base-key-bindings 'paredit)
(setq sp-autoskip-closing-pair 'always)
(setq sp-hybrid-kill-entire-symbol nil)
(sp-use-paredit-bindings)
(smartparens-strict-mode t)

#+END_SRC

Our clojure allows 90 characters line length so for clojure files change the restriction to 90 characters

#+BEGIN_SRC emacs-lisp
(setq whitespace-line-column nil)
(add-hook 'clojure-mode-hook '(lambda () (setq fill-column 90)))
#+END_SRC

** Cider settings

#+BEGIN_SRC emacs-lisp
(setq cider-repl-help-banner nil)
(evil-leader/set-key
"c" 'cider-connect)
#+END_SRC
* Publishing and task management with Org-mode

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â¤µ")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Task and org-capture management

Store my org files in =~/org=, maintain an inbox in Dropbox, define the location
of an index file (my main todo list), and archive finished tasks in
=~/org/archive.org=

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from
there.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-index-file))
#+END_SRC

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record work related todos in =~/org/work.org=,
- Keep personal project todo list in =~/org/personal.org=, and
- Maintain a misc todo list in =~/org/index.org=.

#+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("w" "Work todos"
               entry
               (file (org-file-path "work.org"))
               "* TODO %?\n")
              ("p" "Project todos"
               entry
               (file (org-file-path "personal.org")))
              ("m" "Miscellanous todos"
               entry
               (file (org-file-path "misc.org")))
              ))
#+END_SRC

When I'm starting an org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
